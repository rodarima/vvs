2015A25

1. Prioridad para los lectores
==============================

1.1 Deadlock
============

Para comprobar que no hay bloqueos, se usa un script "deadlock" que comprueba 
las condiciones con spin y filtra la salida:

	$ ./deadlock rw.pml
	hint: this search is more efficient if pan.c is compiled -DSAFETY
	State-vector 44 byte, depth reached 177, errors: 0

No se producen errores de 'deadlock'.

1.2 Safety
==========

Para asegurar el correcto funcionamiento, han de cumplirse los siguientes casos:

	o Nunca dos escritores pueden encontrarse en la sección crítica
	o Nunca un escritor y un lector pueden estar en la sección crítica
	o Dos lectores deben poder acceder a la sección crítica a la vez

Que se convierten en las siguientes condiciones de 'safety':

	[]!(W[0]@cs && W[1]@cs)
	[]!(W@cs && R@cs)
	[]<>(R[2]@cs && R[3]@cs)

Para comprobar que se cumplen, busco un contraejemplo; un caso en el que alguna 
condición NO se cumpla:

	![]!(W[0]@cs && W[1]@cs)
	![]!(W@cs && R@cs)
	![]<>(R[2]@cs && R[3]@cs)

Resultados:
	
	$ ./safety rw.pml
	![]!(W[0]@cs && W[1]@cs)
	State-vector 52 byte, depth reached 355, errors: 0
	
	![]!(W@cs && R@cs)
	State-vector 52 byte, depth reached 355, errors: 0
	
	![]<>(R[2]@cs && R[3]@cs)
	State-vector 52 byte, depth reached 363, errors: 0

Dado que no hay errores, no se han encontrado contraejemplos, por lo tanto se 
cumplen todas las condiciones de seguridad.

1.3 Liveness
============

Las pruebas de viveza (liveness) permiten asegurar que cualquier proceso tendrá 
siempre la oportunidad de llegar a la sección crítica. Para comprobar que esto 
siempre sucede, la siguientes pruebas lo garantizan:

	o En algún momento un lector puede encontrarse en la sección crítica
	o En algún momento un escritor puede encontrarse en la sección crítica

Que pueden transformarse en las siguientes proposiciones:

	<>(R@cs)
	<>(W@cs)

Además, estas propiedades deben cumplirse siempre, por lo que:

	[]<>(R@cs)
	[]<>(W@cs)

Y para encontrar un contraejemplo:

	![]<>(R@cs)
	![]<>(W@cs)

El resultado es el siguiente:

	$ ./liveness rw.pml

	![]<>(R@cs)
	State-vector 52 byte, depth reached 79, errors: 1
	Error log: rw.pml.377592207
	
	![]<>(W@cs)
	State-vector 52 byte, depth reached 427, errors: 1
	Error log: rw.pml.959203654

Ambas pruebas han fallado. En el resultado se muestra con detalle que problema 
ha provocado el error.

En el primer caso, rw.pml.377592207 muestra:

	 24:	proc  3 (R) rw.pml:41 (state 32) 
	...
	 30:	proc  2 (R) rw.pml:27 (state 6)
	...
	 50:	proc  1 (W) rw.pml:15 (state 5)
	...
	 52:	proc  1 (W) rw.pml:16 (state 6)
	 54:	proc  0 (W) rw.pml:14 (state 1)
	...
	 54:	proc  0 (W) rw.pml:14 (state 2)

	  <<<<<START OF CYCLE>>>>>

		      Writer 1 out critical
	 56:	proc  1 (W) rw.pml:17 (state 8)
		  Writer 0 in critical
	 58:	proc  0 (W) rw.pml:15 (state 5)
	 60:	proc  0 (W) rw.pml:16 (state 6)
		  Writer 0 out critical
	 62:	proc  0 (W) rw.pml:17 (state 8)
	 64:	proc  1 (W) rw.pml:14 (state 1)
	 64:	proc  1 (W) rw.pml:14 (state 2)
		      Writer 1 in critical
	 66:	proc  1 (W) rw.pml:15 (state 5)
	 68:	proc  1 (W) rw.pml:16 (state 6)
		      Writer 1 out critical
	 70:	proc  1 (W) rw.pml:17 (state 8)
	 72:	proc  1 (W) rw.pml:14 (state 1)
	 72:	proc  1 (W) rw.pml:14 (state 2)
		      Writer 1 in critical
	 74:	proc  1 (W) rw.pml:15 (state 5)
	 76:	proc  1 (W) rw.pml:16 (state 6)
	 78:	proc  0 (W) rw.pml:14 (state 1)
	 78:	proc  0 (W) rw.pml:14 (state 2)
	spin: trail ends after 78 steps
	#processes: 4
			canwrite = 0
			rmutex = 0
			readers = 1
	 78:	proc  3 (R) rw.pml:23 (state 33)
	 78:	proc  2 (R) rw.pml:27 (state 10)
	 78:	proc  1 (W) rw.pml:17 (state 8)
	 78:	proc  0 (W) rw.pml:15 (state 5)
	4 processes created

Se observa que existe un ciclo, en el que los escritores siempre acaparan el 
hilo de ejecución, impidiendo que ningún lector pueda entrar.

En el segundo caso, los lectores son los que no permiten acceder a los 
escritores. Como se observa en rw.pml.959203654 existe un bucle, en el que un 
escritor sí consigue entrar:

...
222:    proc  3 (R) rw.pml:25 (state 5) [readers = (readers+1)]
224:    proc  3 (R) rw.pml:27 (state 6) [((readers==1))]
	      Writer 1 in critical
226:    proc  1 (W) rw.pml:15 (state 5) [printf('Writer %d in 
	critical\\n',_pid)]
228:    proc  1 (W) rw.pml:16 (state 6) [canwrite = (canwrite+1)]
230:    proc  3 (R) rw.pml:27 (state 7) [((canwrite>0))]
...

Pero el otro escritor nunca lo consigue.



Parece que el escritor acapara el hilo de ejecución siempre. Voy a realizar una
modificación en el código para que esto no suceda. Añado la variable comida,
que impide que un lector pueda acceder a la sección crítica si no hay comida
(tiene que entrar un escritor). Si no hay comida, el escritor la incrementa.

	#define NR	1
	#define NW	1

	#define wait(s) { atomic { s > 0; s-- } }
	#define signal(s) { s++ }

	byte canwrite = 1;
	byte rmutex = 1;
	byte readers = 0;
	int food = 0;

	active [NW] proctype W()
	{
		do ::
			food == 0;
			wait(canwrite);
	cs:		printf("Writer %d in critical\n", _pid);
			food = food + NR;
			signal(canwrite)
			printf("Writer %d out critical\n", _pid);
		od
	}

	active [NR] proctype R()
	{
		do ::
			food > 0;
			wait(rmutex);
			readers++;
			if
			:: readers == 1 -> wait(canwrite);
			:: else -> skip;
			fi;
			signal(rmutex);

	cs:		printf("Reader %d in critical\n", _pid);
			food = food - NR;

			wait(rmutex);
			readers--;
			if
			:: readers == 0 -> signal(canwrite);
			:: else -> skip;
			fi;
			signal(rmutex)
			printf("Reader %d out critical\n", _pid);

		od
	}

Ahora vuelvo a comprobar si no se producen errores.

	./pan -a -f -i
	warning: -i or -I work for safety properties only
	warning: for p.o. reduction to be valid the never claim must be stutter-invariant
	(never claims generated from LTL formulae are stutter-invariant)

	(Spin Version 6.4.3 -- 16 December 2014)
		+ Partial Order Reduction

	Full statespace search for:
		never claim         	+ (never_0)
		assertion violations	+ (if within scope of claim)
		acceptance   cycles 	+ (fairness enabled)
		invalid end states	- (disabled by never claim)

	State-vector 36 byte, depth reached 59, errors: 0
	       85 states, stored (172 visited)
	      135 states, matched
	      307 transitions (= visited+matched)
		0 atomic steps
	hash conflicts:         0 (resolved)

	Stats on memory usage (in Megabytes):
	    0.005	equivalent memory usage for states (stored*(State-vector + overhead))
	    0.285	actual memory usage for states
	  128.000	memory used for hash table (-w24)
	    0.534	memory used for DFS stack (-m10000)
	  128.730	total actual memory usage


	unreached in proctype W
		rw.pml:22, state 14, "-end-"
		(1 of 14 states)
	unreached in proctype R
		rw.pml:49, state 38, "-end-"
		(1 of 38 states)
	unreached in claim never_0
		rw.pml.nvr:12, state 13, "-end-"
		(1 of 13 states)

	pan: elapsed time 0 seconds


2. Prioridad para los escritores
================================

2.1 Deadlock
============

Con el script "deadlock" se comprueba que no existen bloqueos:

	$ ./deadlock wr.pml
	hint: this search is more efficient if pan.c is compiled -DSAFETY
	State-vector 44 byte, depth reached 1005, errors: 0

El resultado es de 0 errores, por lo que no hay deadlock.

2.2 Safety
==========

Para esta solución, las pruebas de seguridad siguen siendo las mismas que en la 
solución anterior.

	$ ./safety wr.pml
	![]!(W[0]@cs && W[1]@cs)
	State-vector 52 byte, depth reached 2011, errors: 0

	![]!(W@cs && R@cs)
	State-vector 52 byte, depth reached 1453, errors: 0

	![]<>(R[2]@cs && R[3]@cs)
	State-vector 52 byte, depth reached 1671, errors: 0

No se produce ningún error, por lo tanto todas las condiciones de seguridad 
siguen cumpliéndose en esta solución también.


2.3 Liveness
============

De igual forma que antes, se comprueban las mismas condiciones de viveza.

	$ ./liveness wr.pml
	![]<>(R@cs)
	State-vector 52 byte, depth reached 449, errors: 1
	Error log: wr.pml.428767635

	![]<>(W@cs)
	State-vector 52 byte, depth reached 1432, errors: 1
	Error log: wr.pml.041073000

Ambas fallan, obteniendo el mismo resultado que en la solución anterior.

En el primer caso, wr.pml.428767635 muestra un bucle:

...
338:    proc  0 (W) wr.pml:25 (state 17)        [((canwrite>0))]
338:    proc  0 (W) wr.pml:25 (state 18)        [canwrite = (canwrite-1)]
  <<<<<START OF CYCLE>>>>>
	  Writer 0 in critical
340:    proc  0 (W) wr.pml:26 (state 21)        [printf('Writer %d in 
	critical\\n',_pid)]
342:    proc  1 (W) wr.pml:30 (state 28)        [writers = (writers-1)]
344:    proc  1 (W) wr.pml:33 (state 32)        [else]
346:    proc  1 (W) wr.pml:33 (state 33)        [(1)]
348:    proc  1 (W) wr.pml:35 (state 36)        [wmutex = (wmutex+1)]
...

En el que ambos escritores acceden continuamente a la sección crítica, 
impidiendo que los lectores puedan acceder.

De forma similar, en wr.pml.041073000:

1396:   proc  1 (W) wr.pml:26 (state 21)        [printf('Writer %d in 
	critical\\n',_pid)]
1398:   proc  1 (W) wr.pml:27 (state 22)        [canwrite = (canwrite+1)]
  <<<<<START OF CYCLE>>>>>
1400:   proc  1 (W) wr.pml:29 (state 24)        [((wmutex>0))]
1400:   proc  1 (W) wr.pml:29 (state 25)        [wmutex = (wmutex-1)]
1402:   proc  1 (W) wr.pml:30 (state 28)        [writers = (writers-1)]
1404:   proc  1 (W) wr.pml:33 (state 32)        [else]
1406:   proc  1 (W) wr.pml:33 (state 33)        [(1)]
1408:   proc  1 (W) wr.pml:35 (state 36)        [wmutex = (wmutex+1)]
	      Writer 1 out critical
1410:   proc  1 (W) wr.pml:36 (state 38)        [printf('Writer %d out 
	critical\\n',_pid)]
1412:   proc  1 (W) wr.pml:17 (state 1) [((wmutex>0))]
1412:   proc  1 (W) wr.pml:17 (state 2) [wmutex = (wmutex-1)]
1414:   proc  1 (W) wr.pml:18 (state 5) [writers = (writers+1)]
1416:   proc  1 (W) wr.pml:21 (state 11)        [else]
1418:   proc  1 (W) wr.pml:21 (state 12)        [(1)]
1420:   proc  1 (W) wr.pml:23 (state 15)        [wmutex = (wmutex+1)]
1422:   proc  1 (W) wr.pml:25 (state 17)        [((canwrite>0))]
1422:   proc  1 (W) wr.pml:25 (state 18)        [canwrite = (canwrite-1)]
	      Writer 1 in critical
1424:   proc  1 (W) wr.pml:26 (state 21)        [printf('Writer %d in 
	critical\\n',_pid)]
1426:   proc  1 (W) wr.pml:27 (state 22)        [canwrite = (canwrite+1)]
spin: trail ends after 1426 steps
#processes: 4

Un escritor se mantiene continuamente en la zona crítica acaparando la 
ejecución, impidiendo que el otro escritor pueda acceder. Y también algún 
lector.

3. Conclusiones
===============

Ambas soluciones verifican la ausencia de bloqueos 'deadlock' y la exclusión 
mútua. Sin embargo no garantizan la ausencia de 'starvation', esto es, que 
existe el caso en el que un proceso (o más) nunca puedan acceder a la sección 
crítica.

Si bien, en condiciones de igualdad, en la que todos los procesos tienen la 
misma probabilidad de ser elegidos para continuar el hilo de la ejecución, todos 
los procesos tendrán la misma probabilidad de acceder a la zona crítica (tras 
emplear only_one).

Aún así, no garantiza que no se produzca 'starvation'.

Para evitarlo, se propone una solución en la que los procesos escritores 
producen un bien, en este caso un contador de alimento (food). Y los lectores 
conumen ese bien. De esta forma se erradica la ejecución infinita de lectores o 
escritores.

Con esta solución, se garantiza que siempre sea posible que al menos un escritor 
y un lector puedan ejecutarse en un punto futuro. 

Para comprobar esta solución, se propone un sólo escritor y un sólo lector:

	$ ./liveness rw2.pml

	![]<>(R@cs)
	State-vector 36 byte, depth reached 59, errors: 0
	OK

	![]<>(W@cs)
	State-vector 36 byte, depth reached 59, errors: 0
	OK

No se produce starvation. Para más de un proceso sí ocurre.

Para conseguir que varias procesos puedan ejecutarse, es necesario añadir otra 
restricción. Una posible solución, pese a ser muy restrictiva, consigue paliar 
estos problemas.

Consiste en permitir la ejecución de cada proceso, sólo de forma secuencial, 
esto en, primero el escritor 0, luego el 1... De esta forma garantiza que todos 
los procesos se ejecutarán siempre.

Para comprobarlo, se vuelven a pasar todas las pruebas anteriores:

	$ ./test rw2.pml
	
	# DEADLOCK
	
	hint: this search is more efficient if pan.c is compiled -DSAFETY
	State-vector 52 byte, depth reached 121, errors: 0
	
	# SAFETY
	
	![]!(W[0]@cs && W[1]@cs)
	warning: never claim + accept labels requires -a flag to fully verify
	hint: this search is more efficient if pan.c is compiled -DSAFETY
	State-vector 60 byte, depth reached 243, errors: 0
	
	![]!(W@cs && R@cs)
	warning: never claim + accept labels requires -a flag to fully verify
	hint: this search is more efficient if pan.c is compiled -DSAFETY
	State-vector 60 byte, depth reached 243, errors: 0
	
	![]<>(R[2]@cs && R[3]@cs)
	warning: never claim + accept labels requires -a flag to fully verify
	hint: this search is more efficient if pan.c is compiled -DSAFETY
	State-vector 60 byte, depth reached 501, errors: 0
	
	# LIVENESS
	
	![]<>(R@cs)
	State-vector 60 byte, depth reached 453, errors: 0
	OK
	
	![]<>(W@cs)
	State-vector 60 byte, depth reached 453, errors: 0
	OK

Todas las pruebas se pasan satisfactoriamente. En el caso de la segunda 
solución, se realiza el mismo procedimiento. Y posteriormente se comprueba de 
nuevo:
	$ ./test wr2.pml
	
	# DEADLOCK
	
	hint: this search is more efficient if pan.c is compiled -DSAFETY
	State-vector 60 byte, depth reached 396, errors: 0
	
	# SAFETY
	
	![]!(W[0]@cs && W[1]@cs)
	warning: never claim + accept labels requires -a flag to fully verify
	hint: this search is more efficient if pan.c is compiled -DSAFETY
	State-vector 68 byte, depth reached 793, errors: 0
	
	![]!(W@cs && R@cs)
	warning: never claim + accept labels requires -a flag to fully verify
	hint: this search is more efficient if pan.c is compiled -DSAFETY
	State-vector 68 byte, depth reached 793, errors: 0
	
	![]<>(R[2]@cs && R[3]@cs)
	warning: never claim + accept labels requires -a flag to fully verify
	hint: this search is more efficient if pan.c is compiled -DSAFETY
	State-vector 68 byte, depth reached 793, errors: 0
	
	# LIVENESS
	
	![]<>(R@cs)
	State-vector 68 byte, depth reached 1361, errors: 0
	OK
	
	![]<>(W@cs)
	State-vector 68 byte, depth reached 1361, errors: 0
	OK

Las dos soluciones pasan ahora todas las pruebas realizadas. Se encuentran en 
rw2.pml y wr2.pml.
